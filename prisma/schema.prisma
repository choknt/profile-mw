generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String?  @unique
  passwordHash          String?
  provider              String   @default("credentials")
  handle                String   @unique
  displayName           String?
  nickname              String?
  bio                   String?
  gameId                String?
  level                 Int?
  inviteCode            String?
  avatarUrl             String?
  frameKey              String?
  effectKey             String?
  bgKind                String?
  bgValue               String?
  statusKey             String?
  countryCode           String?
  accountOrder          Int       @default(autoincrement())
  favoriteShipName      String?
  favoriteShipCode      String?
  favoriteShipImage     String?
  gallery               GalleryImage[]
  socials               SocialLink[]
  musicEnabled          Boolean   @default(false)
  musicTrackId          String?
  musicEmbedUrl         String?
  roleAdmin             Boolean   @default(false)
  roleStaff             Boolean   @default(false)
  roleLegend            Boolean   @default(false)
  roleHero              Boolean   @default(false)
  showClan              Boolean   @default(true)
  clanId                String?
  clanTag               String?
  clan                  Clan?     @relation(fields: [clanId], references: [id])
  handleChangedAt       DateTime?
  displayNameChangedAt  DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  likesReceived         Like[]    @relation("LikesOnTarget")
  likesGiven            Like[]    @relation("LikesByUser")
  @@index([handle])
}

model SocialLink {
  id          String   @id @default(cuid())
  platform    String
  url         String
  displayName String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  @@index([userId])
}

model GalleryImage {
  id        String   @id @default(cuid())
  publicId  String?
  url       String
  width     Int?
  height    Int?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  @@index([userId])
}

model Like {
  id            String   @id @default(cuid())
  user          User     @relation("LikesByUser", fields: [userId], references: [id])
  userId        String
  target        User     @relation("LikesOnTarget", fields: [targetUserId], references: [id])
  targetUserId  String
  createdAt     DateTime @default(now())
  @@unique([userId, targetUserId])
  @@index([targetUserId])
}

model GiftCode {
  code       String   @id
  reward     String
  expiresAt  DateTime?
  maxUses    Int       @default(1)
  uses       Int       @default(0)
  createdBy  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model RefStatus {
  key       String  @id
  label     String
  active    Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefFrame {
  key       String  @id
  label     String
  rarity    String?
  active    Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RefEffect {
  key       String  @id
  label     String
  rarity    String?
  active    Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Clan {
  id        String  @id @default(cuid())
  name      String
  tag       String   @unique
  flagEmoji String?
  bio       String?
  ownerId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   User[]
}